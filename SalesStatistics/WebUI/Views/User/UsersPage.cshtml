@using Application.UseCases.Identity.User.Queries.GetUsersWithPagination
@model Application.Common.Models.PaginatedList<Application.UseCases.Identity.User.Queries.GetUsersWithPagination.UserDto>

<h2 class="text-center">Users</h2>

<table class="table text-center">
    <thead>
    <tr>
        <th>
            <button onclick="showInPopup('@Url.Action("Create", "User", null, Context.Request.Scheme)', 'Create user')"
                    class="btn btn-secondary">
                Create user
            </button>
        </th>
    </tr>
    </thead>
</table>

<div id="users-data">
    @await Html.PartialAsync("UsersData", Model)
</div>

<nav>
    <ul class="pagination justify-content-center">
        @if (Model.HasPreviousPage)
        {
            <li class="page-item">@Html.ActionLink("Previous", "UsersPage", "User",
                                      new GetUsersWithPaginationQuery { PageNumber = Model.PageNumber - 1 },
                                      new { @class = "page-link" })
            </li>
        }
        else
        {
            <li class="page-item disabled">@Html.ActionLink("Previous", "UsersPage", "User",
                                               new GetUsersWithPaginationQuery { PageNumber = Model.PageNumber - 1 },
                                      new { @class = "page-link" })
            </li>
        }
        @for (int i = 1; i <= Model.TotalPages; i++)
        {
            if (Model.PageNumber.Equals(i))
            {
                <li class="page-item active">@Html.ActionLink($"{i}", "UsersPage", "User",
                                                 new GetUsersWithPaginationQuery { PageNumber = i },
                                          new { @class = "page-link" })
                </li>
            }
            else
            {
                <li class="page-item">@Html.ActionLink($"{i}", "UsersPage", "User",
                                          new GetUsersWithPaginationQuery { PageNumber = i },
                                          new { @class = "page-link" })
                </li>
            }
        }
        @if (Model.HasNextPage)
        {
            <li class="page-item">@Html.ActionLink("Next", "UsersPage", "User",
                                      new GetUsersWithPaginationQuery { PageNumber = Model.PageNumber + 1 },
                                      new { @class = "page-link" })
            </li>
        }
        else
        {
            <li class="page-item disabled">@Html.ActionLink("Next", "UsersPage", "User",
                                               new GetUsersWithPaginationQuery { PageNumber = Model.PageNumber + 1 }, 
                                      new { @class = "page-link" })
            </li>
        }
    </ul>
</nav>