@using Application.UseCases.Customers.Queries.GetCustomersWithPagination
@using Application.UseCases.Customers.Queries.GetFilteringCustomersWithPagination
@model Application.Common.Models.PaginatedList<Application.Common.Models.CustomerDto>

<h2 class="text-center">Customers</h2>

<table class="table text-center">
    <thead>
        <tr>
            @if (User.Identity.IsAuthenticated)
            {
                if (User.IsInRole("admin"))
                {
                    <th>
                        <button onclick="showInPopup('@Url.Action("Create", "Customer", null, Context.Request.Scheme)', 'Create customer')"
                                class="btn btn-secondary">
                            Create customer
                        </button>
                    </th>
                }
            }
            @await Html.PartialAsync("Filter", new GetFilteringCustomersWithPaginationQuery())
        </tr>
    </thead>
</table>

<div id="customers-data">
    @await Html.PartialAsync("CustomersData", Model)
</div>

<nav>
    <ul class="pagination justify-content-center">
        @if (Model.HasPreviousPage)
        {
            <li class="page-item">@Html.ActionLink("Previous", "CustomersPage", "Customer",
                                      new GetCustomersWithPaginationQuery { PageNumber = Model.PageNumber - 1 },
                                      new { @class = "page-link" })
            </li>
        }
        else
        {
            <li class="page-item disabled">@Html.ActionLink("Previous", "CustomersPage", "Customer",
                                               new GetCustomersWithPaginationQuery { PageNumber = Model.PageNumber - 1 },
                                               new { @class = "page-link" })
            </li>
        }
        @for (int i = 1; i <= Model.TotalPages; i++)
        {
            if (Model.PageNumber.Equals(i))
            {
                <li class="page-item active">@Html.ActionLink($"{i}", "CustomersPage", "Customer",
                                                 new GetCustomersWithPaginationQuery { PageNumber = i },
                                                 new { @class = "page-link" })
                </li>
            }
            else
            {
                <li class="page-item">@Html.ActionLink($"{i}", "CustomersPage", "Customer",
                                          new GetCustomersWithPaginationQuery { PageNumber = i },
                                          new { @class = "page-link" })
                </li>
            }
        }
        @if (Model.HasNextPage)
        {
            <li class="page-item">@Html.ActionLink("Next", "CustomersPage", "Customer",
                                      new GetCustomersWithPaginationQuery { PageNumber = Model.PageNumber + 1 },
                                      new { @class = "page-link" })
            </li>
        }
        else
        {
            <li class="page-item disabled">@Html.ActionLink("Next", "CustomersPage", "Customer",
                                               new GetCustomersWithPaginationQuery { PageNumber = Model.PageNumber + 1 }, 
                                               new { @class = "page-link" })
            </li>
        }
    </ul>
</nav>