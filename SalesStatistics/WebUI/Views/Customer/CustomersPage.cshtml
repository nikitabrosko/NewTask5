@using Application.UseCases.Customers.Queries.GetCustomersWithPagination
@using Application.UseCases.Customers.Queries.GetFilteringCustomersWithPagination
@model Application.Common.Models.PaginatedList<Application.Common.Models.CustomerDto>

<h2 class="text-center">Customers</h2>
<table class="table">
    <thead>
        <tr>
            <th scope="col">@Html.ActionLink("Create customer", "Create", "Customer", 
                                new{}, new{ @class = "btn btn-dark" })</th>
            @await Html.PartialAsync("Filter", new GetFilteringCustomersWithPaginationQuery())
            <th scope="col"></th>
            <th scope="col"></th>
        </tr>
        <tr>
            <th scope="col">id</th>
            <th scope="col">First name</th>
            <th scope="col">Last name</th>
            <th scope="col">Full name</th>
            <th scope="col"></th>
            <th scope="col"></th>
        </tr>
    </thead>
    <tbody>
    @foreach (var customer in Model.Items)
    {
        <tr>
            <td>@customer.Id</td>
            <td>@customer.FirstName</td>
            <td>@customer.LastName</td>
            <td>@customer.FullName</td>
            <td>@Html.ActionLink("Edit", "Update", new { customer.Id }, new { @class= "btn btn-dark" })</td>
            <td>@Html.ActionLink("Delete", "Delete", new { customer.Id }, new { @class = "btn btn-dark" })</td>
        </tr>
        }
    </tbody>
</table>

<div>
    @if (Model.HasPreviousPage)
    {
        @Html.ActionLink("Previous page", "CustomersPage", "Customer",
            new GetCustomersWithPaginationQuery { PageNumber = Model.PageNumber - 1 })
    }
    @if (Model.HasNextPage)
    {
        @Html.ActionLink("Next page", "CustomersPage", "Customer",
            new GetCustomersWithPaginationQuery { PageNumber = Model.PageNumber + 1 })
    }
</div>