@using Application.UseCases.Orders.Queries.GetFilteringOrdersWithPagination
@using Application.UseCases.Orders.Queries.GetOrdersWithPagination
@model Application.Common.Models.PaginatedList<Application.Common.Models.OrderDto>

<h2 class="text-center">Orders</h2>

<table class="table text-center">
    <thead>
        <tr>
            <th scope="col">@Html.ActionLink("Create order", "Create", "Order",
                new { }, new { @class = "btn btn-dark" })</th>
            @await Html.PartialAsync("Filter", new GetFilteringOrdersWithPaginationQuery())
            <th scope="col"></th>
            <th scope="col"></th>
            <th scope="col"></th>
        </tr>
        <tr>
            <th scope="col">id</th>
            <th scope="col">Date</th>
            <th scope="col">Sum</th>
            <th scope="col">Customer</th>
            <th scope="col">Manager</th>
            <th scope="col">Product</th>
            <th scope="col"></th>
            <th scope="col"></th>
        </tr>
    </thead>
    <tbody>
    @foreach (var order in Model.Items)
    {
        <tr>
            <td>@order.Id</td>
            <td>@order.Date</td>
            <td>@order.Sum</td>
            <td>@order.CustomerFullName</td>
            <td>@order.ManagerLastName</td>
            <td>@order.ProductName</td>
            <td>@Html.ActionLink("Edit", "Update", new { order.Id }, new { @class = "btn btn-dark" })</td>
            <td>@Html.ActionLink("Delete", "Delete", new { order.Id }, new { @class = "btn btn-dark" })</td>
        </tr>
    }
    </tbody>
</table>

<div>
    @if (Model.HasPreviousPage)
    {
        @Html.ActionLink("Previous page", "OrdersPage", "Order",
            new GetOrdersWithPaginationQuery { PageNumber = Model.PageNumber - 1 })
    }
    @if (Model.HasNextPage)
    {
        @Html.ActionLink("Next page", "OrdersPage", "Order",
            new GetOrdersWithPaginationQuery { PageNumber = Model.PageNumber + 1 })
    }
</div>