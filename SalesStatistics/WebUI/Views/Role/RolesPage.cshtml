@using Application.UseCases.Identity.Role.Queries.GetRolesWithPagination
@model Application.Common.Models.PaginatedList<Application.UseCases.Identity.Role.Queries.GetRolesWithPagination.RoleDto>

<h2 class="text-center">Roles</h2>

<table class="table text-center">
    <thead>
        <tr>
            <th>
                <button onclick="showInPopup('@Url.Action("Create", "Role", null, Context.Request.Scheme)', 'Create role')"
                        class="btn btn-secondary">
                    Create role
                </button>
            </th>
        </tr>
    </thead>
</table>

<div id="roles-data">
    @await Html.PartialAsync("RolesData", Model)
</div>

<nav>
    <ul class="pagination justify-content-center">
        @if (Model.HasPreviousPage)
        {
            <li class="page-item">@Html.ActionLink("Previous", "RolesPage", "Role",
                                      new GetRolesWithPaginationQuery { PageNumber = Model.PageNumber - 1 }, 
                                      new { @class = "page-link" })
            </li>
        }
        else
        {
            <li class="page-item disabled">@Html.ActionLink("Previous", "RolesPage", "Role",
                                               new GetRolesWithPaginationQuery { PageNumber = Model.PageNumber - 1 }, 
                                               new { @class = "page-link" })
            </li>
        }
        @for (int i = 1; i <= Model.TotalPages; i++)
        {
            if (Model.PageNumber.Equals(i))
            {
                <li class="page-item active">@Html.ActionLink($"{i}", "RolesPage", "Role",
                                                 new GetRolesWithPaginationQuery { PageNumber = i }, 
                                                 new { @class = "page-link" })
                </li>
            }
            else
            {
                <li class="page-item">@Html.ActionLink($"{i}", "RolesPage", "Role",
                                          new GetRolesWithPaginationQuery { PageNumber = i }, 
                                          new { @class = "page-link" })
                </li>
            }
        }
        @if (Model.HasNextPage)
        {
            <li class="page-item">@Html.ActionLink("Next", "RolesPage", "Role",
                                      new GetRolesWithPaginationQuery { PageNumber = Model.PageNumber + 1 }, 
                                      new { @class = "page-link" })
            </li>
        }
        else
        {
            <li class="page-item disabled">@Html.ActionLink("Next", "RolesPage", "Role",
                                               new GetRolesWithPaginationQuery { PageNumber = Model.PageNumber + 1 }, 
                                               new { @class = "page-link" })
            </li>
        }
    </ul>
</nav>

<div>
    @if (Model.HasPreviousPage)
    {
        @Html.ActionLink("Previous page", "RolesPage", "Role",
            new GetRolesWithPaginationQuery { PageNumber = Model.PageNumber - 1 })
    }
    @if (Model.HasNextPage)
    {
        @Html.ActionLink("Next page", "RolesPage", "Role",
            new GetRolesWithPaginationQuery { PageNumber = Model.PageNumber + 1 })
    }
</div>